/*
 *  Copyright (c) Huawei Technologies Co., Ltd. 2025-2025. All rights reserved.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

// Code generated by MockGen. DO NOT EDIT.
// Source: ./storage/oceanstorage/aseries/client/client.go
//
// Generated by this command:
//
//	mockgen -source ./storage/oceanstorage/aseries/client/client.go -package mock_client -destination ./test/mocks/mock_client/aseries.go OceanASeriesClientInterface
//

// Package mock_client is a generated GoMock package.
package mock_client

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	client "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/aseries/client"
	base "github.com/Huawei/eSDK_K8S_Plugin/v4/storage/oceanstorage/base"
)

// MockOceanASeriesClientInterface is a mock of OceanASeriesClientInterface interface.
type MockOceanASeriesClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOceanASeriesClientInterfaceMockRecorder
	isgomock struct{}
}

// MockOceanASeriesClientInterfaceMockRecorder is the mock recorder for MockOceanASeriesClientInterface.
type MockOceanASeriesClientInterfaceMockRecorder struct {
	mock *MockOceanASeriesClientInterface
}

// NewMockOceanASeriesClientInterface creates a new mock instance.
func NewMockOceanASeriesClientInterface(ctrl *gomock.Controller) *MockOceanASeriesClientInterface {
	mock := &MockOceanASeriesClientInterface{ctrl: ctrl}
	mock.recorder = &MockOceanASeriesClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOceanASeriesClientInterface) EXPECT() *MockOceanASeriesClientInterfaceMockRecorder {
	return m.recorder
}

// ActivateQos mocks base method.
func (m *MockOceanASeriesClientInterface) ActivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ActivateQos indicates an expected call of ActivateQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) ActivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActivateQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).ActivateQos), ctx, qosID, vStoreID)
}

// AddDataTurboShareUser mocks base method.
func (m *MockOceanASeriesClientInterface) AddDataTurboShareUser(ctx context.Context,
	params *client.AddDataTurboShareUserParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDataTurboShareUser", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDataTurboShareUser indicates an expected call of AddDataTurboShareUser.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) AddDataTurboShareUser(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataTurboShareUser",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).AddDataTurboShareUser), ctx, params)
}

// AllowNfsShareAccess mocks base method.
func (m *MockOceanASeriesClientInterface) AllowNfsShareAccess(ctx context.Context,
	req *base.AllowNfsShareAccessRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllowNfsShareAccess", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// AllowNfsShareAccess indicates an expected call of AllowNfsShareAccess.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) AllowNfsShareAccess(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllowNfsShareAccess",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).AllowNfsShareAccess), ctx, req)
}

// BaseCall mocks base method.
func (m *MockOceanASeriesClientInterface) BaseCall(ctx context.Context, method, url string,
	data map[string]any) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BaseCall", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BaseCall indicates an expected call of BaseCall.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) BaseCall(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BaseCall",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).BaseCall), ctx, method, url, data)
}

// Call mocks base method.
func (m *MockOceanASeriesClientInterface) Call(ctx context.Context, method, url string,
	data map[string]any) (base.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Call", ctx, method, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Call(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Call), ctx, method, url, data)
}

// CreateDataTurboShare mocks base method.
func (m *MockOceanASeriesClientInterface) CreateDataTurboShare(ctx context.Context,
	params *client.CreateDataTurboShareParams) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDataTurboShare", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDataTurboShare indicates an expected call of CreateDataTurboShare.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) CreateDataTurboShare(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDataTurboShare",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).CreateDataTurboShare), ctx, params)
}

// CreateFileSystem mocks base method.
func (m *MockOceanASeriesClientInterface) CreateFileSystem(ctx context.Context, params *client.CreateFilesystemParams,
	advancedOptions map[string]any) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFileSystem", ctx, params, advancedOptions)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFileSystem indicates an expected call of CreateFileSystem.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) CreateFileSystem(ctx, params, advancedOptions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFileSystem",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).CreateFileSystem), ctx, params, advancedOptions)
}

// CreateNfsShare mocks base method.
func (m *MockOceanASeriesClientInterface) CreateNfsShare(ctx context.Context, params map[string]any) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNfsShare", ctx, params)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNfsShare indicates an expected call of CreateNfsShare.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) CreateNfsShare(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNfsShare",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).CreateNfsShare), ctx, params)
}

// CreateQos mocks base method.
func (m *MockOceanASeriesClientInterface) CreateQos(ctx context.Context, args base.CreateQoSArgs) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQos", ctx, args)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQos indicates an expected call of CreateQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) CreateQos(ctx, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).CreateQos), ctx, args)
}

// DeactivateQos mocks base method.
func (m *MockOceanASeriesClientInterface) DeactivateQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeactivateQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeactivateQos indicates an expected call of DeactivateQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeactivateQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeactivateQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeactivateQos), ctx, qosID, vStoreID)
}

// Delete mocks base method.
func (m *MockOceanASeriesClientInterface) Delete(ctx context.Context, url string, data map[string]any) (base.Response,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Delete(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Delete), ctx, url, data)
}

// DeleteDataTurboShare mocks base method.
func (m *MockOceanASeriesClientInterface) DeleteDataTurboShare(ctx context.Context, id, vstoreId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataTurboShare", ctx, id, vstoreId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataTurboShare indicates an expected call of DeleteDataTurboShare.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeleteDataTurboShare(ctx, id, vstoreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataTurboShare",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeleteDataTurboShare), ctx, id, vstoreId)
}

// DeleteFileSystem mocks base method.
func (m *MockOceanASeriesClientInterface) DeleteFileSystem(ctx context.Context, params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFileSystem", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFileSystem indicates an expected call of DeleteFileSystem.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeleteFileSystem(ctx, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFileSystem",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeleteFileSystem), ctx, params)
}

// DeleteNfsShare mocks base method.
func (m *MockOceanASeriesClientInterface) DeleteNfsShare(ctx context.Context, id, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShare", ctx, id, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShare indicates an expected call of DeleteNfsShare.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeleteNfsShare(ctx, id, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNfsShare",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeleteNfsShare), ctx, id, vStoreID)
}

// DeleteNfsShareAccess mocks base method.
func (m *MockOceanASeriesClientInterface) DeleteNfsShareAccess(ctx context.Context, accessID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNfsShareAccess", ctx, accessID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNfsShareAccess indicates an expected call of DeleteNfsShareAccess.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeleteNfsShareAccess(ctx, accessID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNfsShareAccess",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeleteNfsShareAccess), ctx, accessID, vStoreID)
}

// DeleteQos mocks base method.
func (m *MockOceanASeriesClientInterface) DeleteQos(ctx context.Context, qosID, vStoreID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQos", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQos indicates an expected call of DeleteQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) DeleteQos(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).DeleteQos), ctx, qosID, vStoreID)
}

// ExtendFileSystem mocks base method.
func (m *MockOceanASeriesClientInterface) ExtendFileSystem(ctx context.Context, fsID string, newCapacity int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExtendFileSystem", ctx, fsID, newCapacity)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExtendFileSystem indicates an expected call of ExtendFileSystem.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) ExtendFileSystem(ctx, fsID, newCapacity any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExtendFileSystem",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).ExtendFileSystem), ctx, fsID, newCapacity)
}

// Get mocks base method.
func (m *MockOceanASeriesClientInterface) Get(ctx context.Context, url string, data map[string]any) (base.Response,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Get(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Get), ctx, url, data)
}

// GetAllPools mocks base method.
func (m *MockOceanASeriesClientInterface) GetAllPools(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPools", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllPools indicates an expected call of GetAllPools.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetAllPools(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPools",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetAllPools), ctx)
}

// GetAllQos mocks base method.
func (m *MockOceanASeriesClientInterface) GetAllQos(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllQos", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllQos indicates an expected call of GetAllQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetAllQos(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetAllQos), ctx)
}

// GetAllRemoteDevices mocks base method.
func (m *MockOceanASeriesClientInterface) GetAllRemoteDevices(ctx context.Context) ([]map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRemoteDevices", ctx)
	ret0, _ := ret[0].([]map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRemoteDevices indicates an expected call of GetAllRemoteDevices.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetAllRemoteDevices(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRemoteDevices",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetAllRemoteDevices), ctx)
}

// GetApplicationTypeByName mocks base method.
func (m *MockOceanASeriesClientInterface) GetApplicationTypeByName(ctx context.Context, appType string) (string,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationTypeByName", ctx, appType)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationTypeByName indicates an expected call of GetApplicationTypeByName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetApplicationTypeByName(ctx, appType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationTypeByName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetApplicationTypeByName), ctx, appType)
}

// GetBackendID mocks base method.
func (m *MockOceanASeriesClientInterface) GetBackendID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBackendID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetBackendID indicates an expected call of GetBackendID.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetBackendID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBackendID",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetBackendID))
}

// GetDataTurboShareByPath mocks base method.
func (m *MockOceanASeriesClientInterface) GetDataTurboShareByPath(ctx context.Context,
	path, vstoreId string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTurboShareByPath", ctx, path, vstoreId)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataTurboShareByPath indicates an expected call of GetDataTurboShareByPath.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetDataTurboShareByPath(ctx, path, vstoreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTurboShareByPath",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetDataTurboShareByPath), ctx, path, vstoreId)
}

// GetDeviceSN mocks base method.
func (m *MockOceanASeriesClientInterface) GetDeviceSN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceSN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceSN indicates an expected call of GetDeviceSN.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetDeviceSN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceSN",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetDeviceSN))
}

// GetDeviceWWN mocks base method.
func (m *MockOceanASeriesClientInterface) GetDeviceWWN() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceWWN")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDeviceWWN indicates an expected call of GetDeviceWWN.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetDeviceWWN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceWWN",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetDeviceWWN))
}

// GetFileSystemByID mocks base method.
func (m *MockOceanASeriesClientInterface) GetFileSystemByID(ctx context.Context, id string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByID", ctx, id)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByID indicates an expected call of GetFileSystemByID.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetFileSystemByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByID",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetFileSystemByID), ctx, id)
}

// GetFileSystemByName mocks base method.
func (m *MockOceanASeriesClientInterface) GetFileSystemByName(ctx context.Context,
	name, vstoreId string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileSystemByName", ctx, name, vstoreId)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileSystemByName indicates an expected call of GetFileSystemByName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetFileSystemByName(ctx, name, vstoreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileSystemByName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetFileSystemByName), ctx, name, vstoreId)
}

// GetLicenseFeature mocks base method.
func (m *MockOceanASeriesClientInterface) GetLicenseFeature(ctx context.Context) (map[string]int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLicenseFeature", ctx)
	ret0, _ := ret[0].(map[string]int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLicenseFeature indicates an expected call of GetLicenseFeature.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetLicenseFeature(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLicenseFeature",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetLicenseFeature), ctx)
}

// GetNFSServiceSetting mocks base method.
func (m *MockOceanASeriesClientInterface) GetNFSServiceSetting(ctx context.Context) (map[string]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNFSServiceSetting", ctx)
	ret0, _ := ret[0].(map[string]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNFSServiceSetting indicates an expected call of GetNFSServiceSetting.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetNFSServiceSetting(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNFSServiceSetting",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetNFSServiceSetting), ctx)
}

// GetNfsShareAccess mocks base method.
func (m *MockOceanASeriesClientInterface) GetNfsShareAccess(ctx context.Context,
	parentID, name, vStoreID string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccess", ctx, parentID, name, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccess indicates an expected call of GetNfsShareAccess.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetNfsShareAccess(ctx, parentID, name, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareAccess",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetNfsShareAccess), ctx, parentID, name, vStoreID)
}

// GetNfsShareAccessCount mocks base method.
func (m *MockOceanASeriesClientInterface) GetNfsShareAccessCount(ctx context.Context, parentID, vStoreID string) (int64,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccessCount", ctx, parentID, vStoreID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccessCount indicates an expected call of GetNfsShareAccessCount.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetNfsShareAccessCount(ctx, parentID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareAccessCount",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetNfsShareAccessCount), ctx, parentID, vStoreID)
}

// GetNfsShareAccessRange mocks base method.
func (m *MockOceanASeriesClientInterface) GetNfsShareAccessRange(ctx context.Context, parentID, vStoreID string,
	startRange, endRange int64) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareAccessRange", ctx, parentID, vStoreID, startRange, endRange)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareAccessRange indicates an expected call of GetNfsShareAccessRange.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetNfsShareAccessRange(ctx, parentID, vStoreID, startRange, endRange any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareAccessRange",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetNfsShareAccessRange), ctx, parentID, vStoreID,
		startRange, endRange)
}

// GetNfsShareByPath mocks base method.
func (m *MockOceanASeriesClientInterface) GetNfsShareByPath(ctx context.Context, path, vStoreID string) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNfsShareByPath", ctx, path, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNfsShareByPath indicates an expected call of GetNfsShareByPath.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetNfsShareByPath(ctx, path, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNfsShareByPath",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetNfsShareByPath), ctx, path, vStoreID)
}

// GetPoolByName mocks base method.
func (m *MockOceanASeriesClientInterface) GetPoolByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPoolByName indicates an expected call of GetPoolByName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetPoolByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolByName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetPoolByName), ctx, name)
}

// GetQosByID mocks base method.
func (m *MockOceanASeriesClientInterface) GetQosByID(ctx context.Context, qosID, vStoreID string) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByID", ctx, qosID, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByID indicates an expected call of GetQosByID.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetQosByID(ctx, qosID, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQosByID",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetQosByID), ctx, qosID, vStoreID)
}

// GetQosByName mocks base method.
func (m *MockOceanASeriesClientInterface) GetQosByName(ctx context.Context, name, vStoreID string) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQosByName", ctx, name, vStoreID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQosByName indicates an expected call of GetQosByName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetQosByName(ctx, name, vStoreID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQosByName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetQosByName), ctx, name, vStoreID)
}

// GetRemoteDeviceBySN mocks base method.
func (m *MockOceanASeriesClientInterface) GetRemoteDeviceBySN(ctx context.Context, sn string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteDeviceBySN", ctx, sn)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteDeviceBySN indicates an expected call of GetRemoteDeviceBySN.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetRemoteDeviceBySN(ctx, sn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteDeviceBySN",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetRemoteDeviceBySN), ctx, sn)
}

// GetRequest mocks base method.
func (m *MockOceanASeriesClientInterface) GetRequest(ctx context.Context, method, url string,
	data map[string]any) (*http.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequest", ctx, method, url, data)
	ret0, _ := ret[0].(*http.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRequest indicates an expected call of GetRequest.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetRequest(ctx, method, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequest",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetRequest), ctx, method, url, data)
}

// GetSystem mocks base method.
func (m *MockOceanASeriesClientInterface) GetSystem(ctx context.Context) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystem", ctx)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystem indicates an expected call of GetSystem.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetSystem(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystem",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetSystem), ctx)
}

// GetSystemUTCTime mocks base method.
func (m *MockOceanASeriesClientInterface) GetSystemUTCTime(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSystemUTCTime", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSystemUTCTime indicates an expected call of GetSystemUTCTime.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetSystemUTCTime(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSystemUTCTime",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetSystemUTCTime), ctx)
}

// GetVStorePairs mocks base method.
func (m *MockOceanASeriesClientInterface) GetVStorePairs(ctx context.Context) ([]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVStorePairs", ctx)
	ret0, _ := ret[0].([]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVStorePairs indicates an expected call of GetVStorePairs.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetVStorePairs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVStorePairs",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetVStorePairs), ctx)
}

// GetvStoreByName mocks base method.
func (m *MockOceanASeriesClientInterface) GetvStoreByName(ctx context.Context, name string) (map[string]any, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreByName", ctx, name)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetvStoreByName indicates an expected call of GetvStoreByName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetvStoreByName(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetvStoreByName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetvStoreByName), ctx, name)
}

// GetvStoreID mocks base method.
func (m *MockOceanASeriesClientInterface) GetvStoreID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetvStoreID indicates an expected call of GetvStoreID.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetvStoreID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetvStoreID",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetvStoreID))
}

// GetvStoreName mocks base method.
func (m *MockOceanASeriesClientInterface) GetvStoreName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStoreName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetvStoreName indicates an expected call of GetvStoreName.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetvStoreName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetvStoreName",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetvStoreName))
}

// GetvStorePairByID mocks base method.
func (m *MockOceanASeriesClientInterface) GetvStorePairByID(ctx context.Context, pairID string) (map[string]any,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetvStorePairByID", ctx, pairID)
	ret0, _ := ret[0].(map[string]any)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetvStorePairByID indicates an expected call of GetvStorePairByID.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) GetvStorePairByID(ctx, pairID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetvStorePairByID",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).GetvStorePairByID), ctx, pairID)
}

// Login mocks base method.
func (m *MockOceanASeriesClientInterface) Login(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Login indicates an expected call of Login.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Login), ctx)
}

// Logout mocks base method.
func (m *MockOceanASeriesClientInterface) Logout(ctx context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Logout", ctx)
}

// Logout indicates an expected call of Logout.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Logout(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Logout), ctx)
}

// Post mocks base method.
func (m *MockOceanASeriesClientInterface) Post(ctx context.Context, url string, data map[string]any) (base.Response,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Post", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Post indicates an expected call of Post.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Post(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Post), ctx, url, data)
}

// Put mocks base method.
func (m *MockOceanASeriesClientInterface) Put(ctx context.Context, url string, data map[string]any) (base.Response,
	error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", ctx, url, data)
	ret0, _ := ret[0].(base.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) Put(ctx, url, data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).Put), ctx, url, data)
}

// ReLogin mocks base method.
func (m *MockOceanASeriesClientInterface) ReLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReLogin indicates an expected call of ReLogin.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) ReLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReLogin",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).ReLogin), ctx)
}

// RemoveDataTurboShareUser mocks base method.
func (m *MockOceanASeriesClientInterface) RemoveDataTurboShareUser(ctx context.Context, objID, vstoreId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveDataTurboShareUser", ctx, objID, vstoreId)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveDataTurboShareUser indicates an expected call of RemoveDataTurboShareUser.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) RemoveDataTurboShareUser(ctx, objID, vstoreId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveDataTurboShareUser",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).RemoveDataTurboShareUser), ctx, objID, vstoreId)
}

// SetSystemInfo mocks base method.
func (m *MockOceanASeriesClientInterface) SetSystemInfo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetSystemInfo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetSystemInfo indicates an expected call of SetSystemInfo.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) SetSystemInfo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetSystemInfo",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).SetSystemInfo), ctx)
}

// UpdateFileSystem mocks base method.
func (m *MockOceanASeriesClientInterface) UpdateFileSystem(ctx context.Context, fsID string,
	params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateFileSystem", ctx, fsID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateFileSystem indicates an expected call of UpdateFileSystem.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) UpdateFileSystem(ctx, fsID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateFileSystem",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).UpdateFileSystem), ctx, fsID, params)
}

// UpdateQos mocks base method.
func (m *MockOceanASeriesClientInterface) UpdateQos(ctx context.Context, qosID, vStoreID string,
	params map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQos", ctx, qosID, vStoreID, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQos indicates an expected call of UpdateQos.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) UpdateQos(ctx, qosID, vStoreID, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQos",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).UpdateQos), ctx, qosID, vStoreID, params)
}

// ValidateLogin mocks base method.
func (m *MockOceanASeriesClientInterface) ValidateLogin(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateLogin", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// ValidateLogin indicates an expected call of ValidateLogin.
func (mr *MockOceanASeriesClientInterfaceMockRecorder) ValidateLogin(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateLogin",
		reflect.TypeOf((*MockOceanASeriesClientInterface)(nil).ValidateLogin), ctx)
}
